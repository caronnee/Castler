#version 100

// Interpolated values from the vertex shaders
varying mediump vec3 Position_worldspace;
varying mediump vec3 Normal_cameraspace;
varying mediump vec3 EyeDirection_cameraspace;
varying mediump vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform mediump vec3 LightPosition_worldspace;
uniform mediump vec3 MaterialDiffuseColor;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	mediump vec3 LightColor = vec3(1,1,1);
	mediump float LightPower = 50.0;
	
	// Material properties
	mediump vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	mediump vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	mediump float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	mediump vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	mediump vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	mediump float cosTheta = clamp( dot( n,l ), 0.0,1.0 );

	// Eye vector (towards the camera)
	mediump vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	mediump vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	mediump float cosAlpha = clamp( dot( E,R ), 0.0,1.0 );
	
	gl_FragColor.rgb = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5.0) / (distance*distance);

}